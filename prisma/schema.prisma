generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(cuid())
  name        String?
  email       String      @unique
  password    String
  isAdmin     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  itineraries Itinerary[]
  orders          Order[]
}

model Activity {
  id             String          @id @default(cuid())
  name           String
  category       String
  location       String
  description    String
  price          Float
  amenities      String[]
  image          String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  itineraryItems ItineraryItem[]
}

model Itinerary {
  id        String         @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  userId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  days      ItineraryDay[]
}

model ItineraryDay {
  id          String          @id @default(cuid())
  date        DateTime
  itineraryId String
  itinerary   Itinerary       @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  items       ItineraryItem[]
}

model ItineraryItem {
  id         String       @id @default(cuid())
  activityId String
  dayId      String
  order      Int
  notes      String?
  activity   Activity     @relation(fields: [activityId], references: [id])
  day        ItineraryDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
}

model Order {
  id              String   @id @default(cuid())
  revolutOrderId  String   @unique
  amount          Int
  currency        String
  planName        String
  schedule        String   // JSON string of the schedule
  status          String   // e.g., 'PENDING', 'COMPLETED', 'CANCELLED'
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}